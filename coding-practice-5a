const express = require("express");
const path = require("path");

const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const app = express();
app.use(express.json());

const dbPath = path.join(__dirname, "moviesData.db");

let db = null;

const initializeDBAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
    app.listen(3000, () => {
      console.log("Server Running at http://localhost:3000/");
    });
  } catch (e) {
    console.log(`DB Error : ${e.message}`);
    process.exit(1);
  }
};

initializeDBAndServer();

//GET all the movies from database
app.get("/movies/", async (request, response) => {
  const dbQuery = `
    SELECT 
    * FROM movie 
    ORDER BY movie_id;`;
  const movies = await db.all(dbQuery);
  response.send(movies);
});

//POST new movies
app.post("/movies/", async (request, response) => {
  const movieDetails = request.body;
  const { directorId, movieName, leadActor } = movieDetails;
  const insertQuery = `
    INSERT INTO movie(
        director_id, 
        movie_name, 
        lead_actor) 
    VALUES (
        ${directorId}, 
        '${movieName}', 
        '${leadActor}' );
        `;
  const dbResponse = await db.run(insertQuery);
  const movieId = dbResponse.lastID;
  response.send("Movie Successfully Added");
});

//GET movies from database by particular movie ID
app.get("/movies/:movieId/", async (request, response) => {
  const { movieId } = request.params;
  const dbQuery = `
    SELECT movie_id, director_id, movie_name, lead_actor
    FROM movie
    WHERE movie_id = ${movieId};`;
  const dbResponse = await db.get(dbQuery);
  response.send(dbResponse);
});

//PUT update the movie column
app.put("/movies/:movieId/", async (request, response) => {
  const { movieId } = request.params;
  const { directorId, movieName, leadActor } = request.body;
  const updateQuery = `
    UPDATE movie 
    SET director_id = ${directorId},
    movie_name = '${movieName}',
    lead_actor = '${leadActor}'
    WHERE movie_id = ${movieId};`;
  const dbResponse = await db.run(updateQuery);
  response.send("Movie Details Updated");
});

//DELETE movie from with particular ID
app.delete("/movies/:movieId/", async (request, response) => {
  const { movieId } = request.params;
  const deleteQuery = `
    DELETE FROM movie
    WHERE movie_id = ${movieId};`;
  const dbResponse = await db.run(deleteQuery);
  response.send("Movie Removed");
});

//GET all the directors movies from database
app.get("/directors/", async (request, response) => {
  const dbQuery = `
    SELECT 
    * FROM director 
    ORDER BY director_id;`;
  const direcotorsResponse = await db.all(dbQuery);
  response.send(direcotorsResponse);
});

app.get("/directors/:directorId/movies/", async (request, response) => {
  const { directorId } = request.params;
  const dbQuery = `
    SELECT movie_name 
    FROM movie INNER JOIN director ON movie.director_id = director.director_id
    WHERE director.director_id = ${directorId}`;
  const dbResponse = await db.all(dbQuery);
  response.send(dbResponse);
});

module.exports = app;
